@page "/SumEvenNumbers"
@using System.Diagnostics

<!-- KristofferStrube.Blazor.WebWorkers -->
@using KristofferStrube.Blazor.DOM
@using KristofferStrube.Blazor.WebWorkers
@using KristofferStrube.Blazor.Window
@inject IJSRuntime JSRuntime

<!-- Tewr.BlazorWorker.Core -->
@using BlazorWorker.Core.CoreInstanceService
@using BlazorWorker.WorkerCore

<!-- Tewr.BlazorWorker -->
@using BlazorWorker.BackgroundServiceFactory
@using BlazorWorker.Core
@inject IWorkerFactory workerFactory


<!-- SpawnDev.BlazorJS.WebWorkers -->
@using SpawnDev.BlazorJS.WebWorkers
@inject WebWorkerService WebWorkerService

<PageTitle>Workers Benchmarks - Sum Even Numbers</PageTitle>

<h1>Sum Even Numbers</h1>

<p>
    Here we compare how quick a worker can sum all even numbers up to some boundary using three different implementations of a Worker Wrapper.
</p>

<p>
    <label for="rounds">Rounds</label>
    <input type="number" id="rounds" @bind=rounds>
</p>

<p>
    <label for="input">Input</label>
    <input type="number" id="input" @bind=input>
</p>

<p>
    <label for="skipPart">Skip</label>
    <input type="number" id="skipPart" @bind=skipPart>
</p>

<button class="btn btn-primary" @onclick=MeasureMainThread>Measure Average running on main thread</button>

@if (averageMainThread is not null)
{
    <text>
        &nbsp;
        <span class="badge bg-primary">@Math.Round((decimal)averageMainThread, 3)</span> milliseconds
    </text>
}
<br />
<br />

<button class="btn btn-primary" @onclick=MeasureJSWebWorkers>Measure Average JS Web Workers</button>

@if (averageJSWebWorkers is not null)
{
    <text>
        &nbsp;
        <span class="badge bg-primary">@Math.Round((decimal)averageJSWebWorkers, 3)</span> milliseconds
    </text>
}
<br />
<br />

<button class="btn btn-primary" @onclick=MeasureBlazorWebWorkers>Measure Average KristofferStrube.Blazor.WebWorkers</button>

@if (averageKristofferStrubeBlazorWebWorkers is not null)
{
    <text>
        &nbsp;
        <span class="badge bg-primary">@Math.Round((decimal)averageKristofferStrubeBlazorWebWorkers, 3)</span> milliseconds
    </text>
}
<br />
<br />

<button class="btn btn-primary" @onclick=MeasureTewrBlazorWorker>Measure Average Tewr.BlazorWorker</button>

@if (averageTewrBlazorWorker is not null)
{
    <text>
        &nbsp;
        <span class="badge bg-primary">@Math.Round((decimal)averageTewrBlazorWorker, 3)</span> milliseconds
    </text>
}
<br />
<br />

<button class="btn btn-primary" @onclick=MeasureTewrBlazorWorkerCore>Measure Average Tewr.BlazorWorker.Core</button>

@if (averageTewrBlazorWorkerCore is not null)
{
    <text>
        &nbsp;
        <span class="badge bg-primary">@Math.Round((decimal)averageTewrBlazorWorkerCore, 3)</span> milliseconds
    </text>
}
<br />
<br />

<button class="btn btn-primary" @onclick=MeasureSpawnDevBlazorJSWebWorkers>Measure Average SpawnDev.BlazorJS.WebWorkers</button>

@if (averageSpawnDevBlazorJSWebWorkers is not null)
{
    <text>
        &nbsp;
        <span class="badge bg-primary">@Math.Round((decimal)averageSpawnDevBlazorJSWebWorkers, 3)</span> milliseconds
    </text>
}
<br />
<br />

@code {
    int rounds = 100;
    int input = 1000;
    double skipPart = 0.9;

    double? averageMainThread = null;
    double? averageJSWebWorkers = null;
    double? averageKristofferStrubeBlazorWebWorkers = null;
    double? averageTewrBlazorWorker = null;
    double? averageTewrBlazorWorkerCore = null;
    double? averageSpawnDevBlazorJSWebWorkers = null;

    public async Task MeasureMainThread()
    {
        averageMainThread = null;
        StateHasChanged();

        SumEvenNumbersJob job = new();

        List<double> measurements = new();
        for (int i = 0; i < rounds; i++)
        {
            long start = Stopwatch.GetTimestamp();
            job.Work(input);
            measurements.Add(Stopwatch.GetElapsedTime(start).TotalMilliseconds);
        }

        averageMainThread = measurements
            .OrderDescending()
            .Skip((int)(rounds * skipPart))
            .Average();
    }

    public async Task MeasureJSWebWorkers()
    {
        long start = 0;
        averageJSWebWorkers = null;
        StateHasChanged();

        var jsWorker = await Worker.CreateAsync(JSRuntime, "sumEvenNumbers.js");

        List<double> measurements = new();
        int i = 0;

        EventListener<MessageEvent> eventListener = default!;
        eventListener = await EventListener<MessageEvent>.CreateAsync(JSRuntime, async e =>
        {
            i++;
            int result = await e.GetDataAsync<int>();
            measurements.Add(Stopwatch.GetElapsedTime(start).TotalMilliseconds);
            if (i < rounds)
            {
                start = Stopwatch.GetTimestamp();
                await jsWorker.PostMessageAsync(input);
            }
            else
            {
                await jsWorker.RemoveOnMessageEventListenerAsync(eventListener);
                await eventListener.DisposeAsync();

                averageJSWebWorkers = measurements
                    .OrderDescending()
                    .Skip((int)(rounds * skipPart))
                    .Average();
                StateHasChanged();
            }
        });

        await jsWorker.AddOnMessageEventListenerAsync(eventListener);

        start = Stopwatch.GetTimestamp();
        await jsWorker.PostMessageAsync(input);
    }

    public async Task MeasureBlazorWebWorkers()
    {
        averageKristofferStrubeBlazorWebWorkers = null;
        StateHasChanged();

        var jobWorker = await JobWorker<int, int, SumEvenNumbersJob>.CreateAsync(JSRuntime);

        List<double> measurements = new();
        for (int i = 0; i < rounds; i++)
        {
            long start = Stopwatch.GetTimestamp();
            await jobWorker.ExecuteAsync(input);
            measurements.Add(Stopwatch.GetElapsedTime(start).TotalMilliseconds);
        }

        averageKristofferStrubeBlazorWebWorkers = measurements
            .OrderDescending()
            .Skip((int)(rounds * skipPart))
            .Average();
    }

    public async Task MeasureTewrBlazorWorker()
    {
        averageTewrBlazorWorker = null;
        StateHasChanged();

        var worker = await workerFactory.CreateAsync();
        var service = await worker.CreateBackgroundServiceAsync<SumEvenNumbersJob>();

        List<double> measurements = new();
        for (int i = 0; i < rounds; i++)
        {
            long start = Stopwatch.GetTimestamp();
            var localParameterValue = input;
            await service.RunAsync(s => s.Work(localParameterValue));
            measurements.Add(Stopwatch.GetElapsedTime(start).TotalMilliseconds);
        }

        averageTewrBlazorWorker = measurements
            .OrderDescending()
            .Skip((int)(rounds * skipPart))
            .Average();
    }

    public class SumEvenNumbersJobCore : SumEvenNumbersJob
    {
        private readonly IWorkerMessageService messageService;

        public SumEvenNumbersJobCore(IWorkerMessageService messageService)
        {
            this.messageService = messageService;
            this.messageService.IncomingMessage += (e, message) =>
            {
                var result = this.Work(int.Parse(message));
                this.messageService.PostMessageAsync(result.ToString());
            };
        }
    }

    public async Task MeasureTewrBlazorWorkerCore()
    {
        averageTewrBlazorWorkerCore = null;
        StateHasChanged();

        var worker = await workerFactory.CreateAsync();
        // response synchronizer
        TaskCompletionSource<int> nextMessageSource() => 
            new();

        var nextMessage = nextMessageSource();
        void OnWorkerMessage(object _, string message) =>
            nextMessage.SetResult(int.Parse(message));
        
        worker.IncomingMessage += (s, e) => OnWorkerMessage(s ,e);

        var service = worker.CreateCoreInstanceService();
        var handle = await service.CreateInstance<SumEvenNumbersJobCore>();

        List<double> measurements = new();
        for (int i = 0; i < rounds; i++)
        {
            long start = Stopwatch.GetTimestamp();
            await worker.PostMessageAsync(input.ToString());
            await nextMessage.Task;
            nextMessage = nextMessageSource();
            measurements.Add(Stopwatch.GetElapsedTime(start).TotalMilliseconds);
        }

        averageTewrBlazorWorkerCore = measurements
            .OrderDescending()
            .Skip((int)(rounds * skipPart))
            .Average();
    }

    public async Task MeasureSpawnDevBlazorJSWebWorkers()
    {
        averageSpawnDevBlazorJSWebWorkers = null;
        StateHasChanged();

        var worker = await WebWorkerService.GetWebWorker();

        List<double> measurements = new();
        for (int i = 0; i < rounds; i++)
        {
            long start = Stopwatch.GetTimestamp();
            await worker!.Run<SumEvenNumbersJob, int>(job => job.Work(input));
            measurements.Add(Stopwatch.GetElapsedTime(start).TotalMilliseconds);
        }

        averageSpawnDevBlazorJSWebWorkers = measurements
            .OrderDescending()
            .Skip((int)(rounds * skipPart))
            .Average();
    }
}